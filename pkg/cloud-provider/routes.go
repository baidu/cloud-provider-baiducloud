/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cloud_provider

import (
	"context"
	"fmt"

	"github.com/golang/glog"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/kubernetes/pkg/cloudprovider"

	"k8s.io/cloud-provider-baiducloud/pkg/sdk/cce"
	"k8s.io/cloud-provider-baiducloud/pkg/sdk/vpc"
)

// ListRoutes lists all managed routes that belong to the specified clusterName
func (bc *BCECloud) ListRoutes(ctx context.Context, clusterName string) (routes []*cloudprovider.Route, err error) {
	vpcid, err := bc.getVpcID()
	if err != nil {
		return nil, err
	}
	args := vpc.ListRouteArgs{
		VpcID: vpcid,
	}
	rs, err := bc.clientSet.Vpc().ListRouteTable(&args)
	if err != nil {
		return nil, err
	}
	inss, err := bc.clientSet.Cce().ListInstances(bc.ClusterID)
	if err != nil {
		return nil, err
	}
	var kubeRoutes []*cloudprovider.Route
	nodename := make(map[string]string)
	for _, ins := range inss {
		nodename[ins.InstanceId] = ins.InternalIP
	}
	for _, r := range rs {
		// filter instance route
		if r.NexthopType != "custom" {
			continue
		}
		var insName string
		insName, ok := nodename[r.NexthopID]
		if !ok {
			glog.V(4).Infof("Instance name not exist: %s", r.NexthopID)
			insName = "unknow"
		}
		route := &cloudprovider.Route{
			Name:            r.RouteRuleID,
			DestinationCIDR: r.DestinationAddress,
			TargetNode:      types.NodeName(insName),
		}
		kubeRoutes = append(kubeRoutes, route)
	}
	return kubeRoutes, nil
}

func (bc *BCECloud) getVpcRouteTable() ([]vpc.RouteRule, error) {
	vpcid, err := bc.getVpcID()
	if err != nil {
		return nil, err
	}
	args := vpc.ListRouteArgs{
		VpcID: vpcid,
	}
	rs, err := bc.clientSet.Vpc().ListRouteTable(&args)
	if err != nil {
		return nil, err
	}
	return rs, nil
}

// CreateRoute creates the described managed route
// route.Name will be ignored, although the cloud-provider may use nameHint
// to create a more user-meaningful name.
func (bc *BCECloud) CreateRoute(ctx context.Context, clusterName string, nameHint string, kubeRoute *cloudprovider.Route) error {
	glog.V(4).Infof("create: creating route. clusterName=%q instance=%q cidr=%q", clusterName, kubeRoute.TargetNode, kubeRoute.DestinationCIDR)
	vpcRoutes, err := bc.getVpcRouteTable()
	if err != nil {
		return err
	}
	if len(vpcRoutes) < 1 {
		return fmt.Errorf("VPC route length error: length is : %d", len(vpcRoutes))
	}
	var insID string
	inss, err := bc.clientSet.Cce().ListInstances(bc.ClusterID)
	if err != nil {
		return err
	}
	for _, ins := range inss {
		if ins.InternalIP == string(kubeRoute.TargetNode) {
			insID = ins.InstanceId
			if ins.Status == cce.InstanceStatusCreateFailed || ins.Status == cce.InstanceStatusDeleted || ins.Status == cce.InstanceStatusDeleting || ins.Status == cce.InstanceStatusError {
				glog.V(4).Infof("No need to create route, instance has a wrong status: %s", ins.Status)
				return nil
			}
			break
		}
	}
	var needDelete []string
	for _, vr := range vpcRoutes {
		if vr.DestinationAddress == kubeRoute.DestinationCIDR && vr.SourceAddress == "0.0.0.0/0" && vr.NexthopID == insID {
			glog.V(4).Infof("Route rule already exists.")
			return nil
		}
		if vr.DestinationAddress == kubeRoute.DestinationCIDR && vr.SourceAddress == "0.0.0.0/0" {
			needDelete = append(needDelete, vr.RouteRuleID)
		}
	}
	if len(needDelete) > 0 {
		for _, delRoute := range needDelete {
			err := bc.clientSet.Vpc().DeleteRoute(delRoute)
			if err != nil {
				glog.V(4).Infof("Delete VPC route error %s", err)
				return err
			}
		}
	}
	desc := fmt.Sprintf("auto generated by cce:%s", bc.ClusterID)
	args := vpc.CreateRouteRuleArgs{
		RouteTableID:       vpcRoutes[0].RouteTableID,
		NexthopType:        "custom",
		Description:        desc,
		DestinationAddress: kubeRoute.DestinationCIDR,
		SourceAddress:      "0.0.0.0/0",
		NexthopID:          insID,
	}
	descRoute := fmt.Sprintf("创建路由: 目的IP %s , 下一跳 %s", args.DestinationAddress, args.NexthopID)
	glog.V(4).Infof(descRoute)
	_, err = bc.clientSet.Vpc().CreateRouteRule(&args)
	return err
}

// DeleteRoute deletes the specified managed route
// Route should be as returned by ListRoutes
func (bc *BCECloud) DeleteRoute(ctx context.Context, clusterName string, kubeRoute *cloudprovider.Route) error {
	glog.V(4).Infof("DeleteRoute: deleting route. clusterName=%q instance=%q cidr=%q", clusterName, kubeRoute.TargetNode, kubeRoute.DestinationCIDR)
	vpcTable, err := bc.getVpcRouteTable()
	if err != nil {
		glog.V(4).Infof("getVpcRouteTable error %s", err.Error())
		return err
	}
	for _, vr := range vpcTable {
		if vr.DestinationAddress == kubeRoute.DestinationCIDR && vr.SourceAddress == "0.0.0.0/0" {
			glog.V(4).Infof("DeleteRoute: DestinationAddress is %s .", vr.DestinationAddress)
			err := bc.clientSet.Vpc().DeleteRoute(vr.RouteRuleID)
			if err != nil {
				glog.V(4).Infof("Delete VPC route error %s", err.Error())
				return err
			}
			_ = fmt.Sprintf("删除路由: 下一跳 %q 目的IP %q", kubeRoute.TargetNode, kubeRoute.DestinationCIDR)
		}
	}

	glog.V(4).Infof("DeleteRoute: clusterName=%q instance=%q cidr=%q", clusterName, kubeRoute.TargetNode, kubeRoute.DestinationCIDR)

	return nil
}
